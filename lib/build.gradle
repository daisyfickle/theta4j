apply plugin: 'java'
apply plugin: 'findbugs'
apply plugin: 'jacoco'

archivesBaseName = 'theta4j'
version = rootProject.version

dependencies {
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'org.slf4j:slf4j-api:1.7.10'
    compile 'ch.qos.logback:logback-classic:1.1.2'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
}

// SonarQurbe

apply plugin: 'sonar-runner'

sonarRunner {
    sonarProperties {
        property "sonar.projectName", archivesBaseName
        property "sonar.host.url", "http://sonar.shiro.be"
        property "sonar.jdbc.url", "jdbc:mysql://sonar.shiro.be:3306/sonar"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", java.lang.System.getenv()['SONAR_DB_USER']
        property "sonar.jdbc.password", java.lang.System.getenv()['SONAR_DB_PASSWORD']
    }
}

// Integration Test

sourceSets {
    integrationTest {
        java.srcDir file('src/integrationTest/java')
        resources.srcDir file('src/integrationTest/resources')
    }
}

dependencies {
    integrationTestCompile sourceSets.main.output
    integrationTestCompile configurations.testCompile
    integrationTestCompile sourceSets.test.output
    integrationTestRuntime configurations.testRuntime
}

task integrationTest(type: Test) {
    description 'Execute tests with real device. A Wi-Fi connection to real THETA must be established before execution.'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

test.dependsOn -= integrationTest

// Publish

apply plugin: 'maven'
apply plugin: 'signing'

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

artifacts {
    archives jar, javadocJar, sourcesJar
}

if (new File('gradle.properties', projectDir).exists()) {
    signing {
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    groupId 'org.theta4j'
                    name archivesBaseName
                    packaging 'jar'
                    description 'RICOH THETA SDK for Java.'
                    url 'http://www.example.com/example-application'

                    scm {
                        connection 'scm:git:git://github.com/shrhdk/theta4j.git'
                        developerConnection 'scm:git:git://github.com/shrhdk/theta4j.git'
                        url 'https://github.com/shrhdk/theta4j.git'
                    }

                    licenses {
                        license {
                            name 'Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id 'shrhdk'
                            name 'Hideki Shiro'
                            email 'hideki@shiro.be'
                        }
                    }
                }
            }
        }
    }
}
