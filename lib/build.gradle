/*
 * Copyright (C) 2015 theta4j project
 */

plugins {
    id "org.sonarqube" version "2.6.2"
}

apply plugin: 'java'
apply plugin: 'findbugs'
apply plugin: 'jacoco'

archivesBaseName = 'theta4j'
version = rootProject.version

dependencies {
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'org.slf4j:slf4j-api:1.7.10'
    testCompile 'ch.qos.logback:logback-classic:1.1.2'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
}

// Javadoc

javadoc {
    options.locale = 'en_US'
    title = "$archivesBaseName - $version"
    exclude '**/org/theta4j/ptp/*.java'
    exclude '**/org/theta4j/ptp/code/*.java'
    exclude '**/org/theta4j/ptp/io/*.java'
    exclude '**/org/theta4j/util/*.java'
    exclude '**/org/theta4j/ptpip/**/*.java'
}

// Integration Test

sourceSets {
    integrationTest {
        java.srcDir file('src/integrationTest/java')
        resources.srcDir file('src/integrationTest/resources')
    }
}

dependencies {
    integrationTestCompile sourceSets.main.output
    integrationTestCompile configurations.testCompile
    integrationTestCompile sourceSets.test.output
    integrationTestRuntime configurations.testRuntime
}

task integrationTest(type: Test) {
    group tasks.test.group
    description 'Execute tests with real device. A Wi-Fi connection to real THETA must be established before execution.'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

test.dependsOn -= integrationTest

// Video Test

sourceSets {
    videoTest {
        java.srcDir file('src/videoTest/java')
        resources.srcDir file('src/videoTest/resources')
    }
}

dependencies {
    videoTestCompile sourceSets.main.output
    videoTestCompile configurations.testCompile
    videoTestCompile sourceSets.test.output
    videoTestCompile sourceSets.integrationTest.output
    videoTestRuntime configurations.testRuntime
}

task videoTest(type: Test) {
    group tasks.test.group
    description 'Execute video recording tests with real device. A Wi-Fi connection to real THETA must be established before execution.'
    testClassesDir = sourceSets.videoTest.output.classesDir
    classpath = sourceSets.videoTest.runtimeClasspath
}

// Publish

if (project.file('publish.properties').exists()) {
    apply plugin: 'maven'
    apply plugin: 'signing'

    Properties publishProps = new Properties();
    publishProps.load(project.file('publish.properties').newInputStream())
    ext.'signing.keyId' = publishProps.getProperty('signing.keyId')
    ext.'signing.password' = publishProps.getProperty('signing.password')
    ext.'signing.secretKeyRingFile' = publishProps.getProperty('signing.secretKeyRingFile')
    ext.ossrhUsername = publishProps.getProperty('ossrhUsername')
    ext.ossrhPassword = publishProps.getProperty('ossrhPassword')

    task javadocJar(type: Jar) {
        group tasks.build.group
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        group tasks.build.group
        classifier = 'sources'
        from sourceSets.main.allJava
    }

    artifacts {
        archives jar, javadocJar, sourcesJar
    }

    signing {
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    groupId 'org.theta4j'
                    name archivesBaseName
                    packaging 'jar'
                    description 'theta4j is a library for RICOH THETA written in Java.'
                    url 'http://theta4j.org/'

                    scm {
                        connection 'scm:git:git://github.com/shrhdk/theta4j.git'
                        developerConnection 'scm:git:git://github.com/shrhdk/theta4j.git'
                        url 'https://github.com/shrhdk/theta4j.git'
                    }

                    licenses {
                        license {
                            name 'Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id 'shrhdk'
                            name 'Hideki Shiro'
                            email 'hideki@shiro.be'
                        }
                    }
                }
            }
        }
    }
}
